<Window x:Class="IndoorMapTools.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:imt="clr-namespace:IndoorMapTools"
        xmlns:view="clr-namespace:IndoorMapTools.View"
        xmlns:uc="clr-namespace:IndoorMapTools.View.UserControls"
        xmlns:vm="clr-namespace:IndoorMapTools.ViewModel"
        xmlns:cvt="clr-namespace:IndoorMapTools.Helper"
        xmlns:dc="clr-namespace:EnhancedCommands.System.Windows.Input.DialogCommands;assembly=EnhancedCommands"
        Title="{DynamicResource strings.AppName}"
        WindowStartupLocation="CenterScreen" MinWidth="1280" MinHeight="720"
        mc:Ignorable="d" d:DesignHeight="720" d:DesignWidth="1280">

    <Grid x:Name="mainGrid" DataContext="{x:Static vm:AppVM.Current}"
          d:DataContext="{d:DesignInstance Type=vm:AppVM}"
          Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" MaxWidth="300"/>
            <ColumnDefinition Width="4*"/>
        </Grid.ColumnDefinitions>

        <Grid x:Name="systemButtonGrid" Grid.Row="0" Grid.Column="0"
              Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="10*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="10*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="10*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="10*"/>
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.NewProject}"
                    Visibility="{Binding Project, Converter={cvt:NonNullityToVisibility}}">
                <Image Source="/Resources/new.png" Opacity="0.9"/>
                <Button.Command>
                    <dc:MessageBoxCommand Title="{DynamicResource strings.NewProject}"
                                          Buttons="YesNoCancel" Icon="Warning" DefaultResult="Cancel"
                                          Message="{DynamicResource strings.SaveAndNewProjectWarningMessage}"
                                          NoCommand="{Binding NewProjectCommand}">
                        <dc:MessageBoxCommand.Command>
                            <dc:SaveFileDialogCommand Command="{Binding Project.SaveAndNewProjectCommand}"
                                                      Filter="{DynamicResource strings.SaveProjectFilter}"/>
                        </dc:MessageBoxCommand.Command>
                    </dc:MessageBoxCommand>
                </Button.Command>
            </Button>

            <Button Grid.Column="0" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.NewProject}"
                    Visibility="{Binding Project, Converter={cvt:NullityToVisibility}}"
                    Command="{Binding NewProjectCommand}">
                <Image Source="/Resources/new.png" Opacity="0.9"/>
            </Button>
            
            <Button Grid.Column="2" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.LoadProject}">
                <Button.Command>
                    <dc:OpenFileDialogCommand Title="{DynamicResource strings.LoadProject}" 
                                              Command="{Binding LoadProjectCommand}"
                                              CommandParameter="{Binding FileName, RelativeSource={RelativeSource Self}}"
                                              Filter="{DynamicResource strings.LoadProjectFilter}"/>
                </Button.Command>
                <Image Source="/Resources/load.png" Opacity="0.9"/>
            </Button>

            <Button Grid.Column="4" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.SaveProject}"
                    DataContext="{Binding Project}">
                <Button.Command>
                    <dc:SaveFileDialogCommand Title="{DynamicResource strings.SaveProject}"
                                              Command="{Binding SaveProjectCommand}" 
                                              CommandParameter="{Binding FileName, RelativeSource={RelativeSource Self}}"
                                              Filter="{DynamicResource strings.SaveProjectFilter}"/>
                </Button.Command>
                <Image Source="/Resources/save.png" Opacity="0.9"/>
            </Button>


            <Button Grid.Column="6" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.AnalyzeReachability}"
                    DataContext="{Binding Project}">
                <Button.Command>
                    <dc:TemplatedDialogCommand Title="{DynamicResource strings.AnalyzeReachability}"
                                               DialogContext="{Binding}">
                        <DataTemplate DataType="{x:Type vm:Project}">
                            <view:AnalysisForm/>
                        </DataTemplate>
                    </dc:TemplatedDialogCommand>
                </Button.Command>
                <Image Source="/Resources/analysis.png" Opacity="0.9"/>
            </Button>

            <Button Grid.Column="8" IsTabStop="False" Style="{StaticResource SystemButtonStyle}"
                    ToolTip="{DynamicResource strings.ExportProject}"
                    DataContext="{Binding Project}">
                <Button.Command>
                    <dc:TemplatedDialogCommand Title="{DynamicResource strings.ExportProject}"
                                               DialogContext="{Binding}">
                        <DataTemplate DataType="{x:Type vm:Project}">
                            <view:ExportProjectForm/>
                        </DataTemplate>
                    </dc:TemplatedDialogCommand>
                </Button.Command>
                <Image Source="/Resources/export.png" Opacity="0.9"/>
            </Button>
        </Grid>

        <uc:ListViewEx x:Name="floorList" Grid.Row="1" Margin="5,0,0,5" AlternationCount="99999999"
                       DataContext="{Binding Project.Building}" ItemsSource="{Binding Floors}"
                       d:DataContext="{d:DesignInstance Type=vm:Building}"
                       OnFileDropCommand="{Binding CreateFloorCommand}"
                       SelectedItem="{Binding Tag.ParentFloor, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                       Tag="{Binding Children[2].DataContext, ElementName=floorPage, 
                        Converter={cvt:ConservativeTypeFilter}, ConverterParameter={x:Type vm:Landmark}}"
                       ScrollViewer.HorizontalScrollBarVisibility="Disabled">
            <uc:ListViewEx.Style>
                <Style TargetType="{x:Type uc:ListViewEx}">
                    <Style.Triggers>
                        <Trigger Property="DataContext" Value="{x:Null}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Setter Property="Background" Value="LightGray"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </uc:ListViewEx.Style>
            <uc:ListViewEx.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Grid.ColumnSpan="2"
                               HorizontalAlignment="Center" VerticalAlignment="Center" 
                               Text="{DynamicResource strings.FloorsList}"/>
                    <uc:HierarchyCheckBox x:Name="chkboxMaster" Grid.Column="0" VerticalAlignment="Center"
                                        Style="{StaticResource VisibilityCheckBoxStyle}" IsChecked="True"/>
                </Grid>
            </uc:ListViewEx.Header>
            <uc:ListViewEx.ItemTemplate>
                <DataTemplate DataType="{x:Type vm:Floor}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                        <uc:HierarchyCheckBox VerticalAlignment="Center"
                                       Master="{Binding ElementName=chkboxMaster}"
                                       Style="{StaticResource VisibilityCheckBoxStyle}"
                                       IsChecked="{Binding Visible}"/>
                        <TextBlock Text="{Binding Name}" Margin="10,0,0,0"/>
                    </StackPanel>
                </DataTemplate>
            </uc:ListViewEx.ItemTemplate>

            <uc:ListViewEx.ItemContainerStyle>
                <Style TargetType="uc:EnhancedListViewItem">
                    <Setter Property="DeleteCommand" Value="{Binding DeleteCommand}"/>
                    <Setter Property="ReorderCommand" Value="{Binding ReorderCommand}"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu>
                                <MenuItem Header="{DynamicResource strings.ReplicateFloor}">
                                    <MenuItem.Command>
                                        <dc:TemplatedDialogCommand Title="{DynamicResource strings.ReplicateFloor}"
                                                           DialogContext="{Binding}">
                                            <DataTemplate DataType="{x:Type vm:Floor}">
                                                <StackPanel Orientation="Vertical" Margin="5">
                                                    <StackPanel Orientation="Horizontal">
                                                        <TextBlock Text="{DynamicResource strings.ReplicateFloorMessagePrefix}"/>
                                                        <uc:EditableText x:Name="textCount" Value="1" VisualType="HyperText" Validator="Natural"/>
                                                        <TextBlock Text="{DynamicResource strings.ReplicateFloorMessagePostfix}"/>
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                                        <uc:OKButton Content="{DynamicResource strings.OK}"
                                                             Command="{Binding ReplicateCommand}"
                                                             CommandParameter="{Binding Value, 
                                                                ElementName=textCount, Converter={cvt:AssertInt}}"/>
                                                        <uc:CancelButton Content="{DynamicResource strings.Cancel}"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </DataTemplate>
                                        </dc:TemplatedDialogCommand>
                                    </MenuItem.Command>
                                </MenuItem>
                                <MenuItem Header="{DynamicResource strings.ModifyMapImage}">
                                    <MenuItem.Command>
                                        <dc:TemplatedDialogCommand Title="{DynamicResource strings.ModifyMapImage}"
                                                                   DialogContext="{Binding}">
                                            <DataTemplate DataType="{x:Type vm:Floor}">
                                                <view:ManageImageForm/>
                                            </DataTemplate>
                                        </dc:TemplatedDialogCommand>
                                    </MenuItem.Command>
                                </MenuItem>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                </Style>
            </uc:ListViewEx.ItemContainerStyle>
            <uc:ListViewEx.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{DynamicResource strings.BatchRenameFloors}" 
                              Command="{Binding BatchFloorNameCommand}"/>
                </ContextMenu>
            </uc:ListViewEx.ContextMenu>
        </uc:ListViewEx>

        <TabControl Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" Margin="5"
                    DataContext="{Binding Project.Building}">
            <TabItem Header="{DynamicResource strings.GlobalMapInfo}">
                <view:BuildingPage DataContext="{Binding SelectedItem, ElementName=floorList}"/>
            </TabItem>
            <TabItem Header="{DynamicResource strings.IndoorMapInfo}">
                <view:FloorPage x:Name="floorPage" DataContext="{Binding SelectedItem, ElementName=floorList}"/>
            </TabItem>
        </TabControl>

        <Border Grid.Row="2" Grid.ColumnSpan="2"/>
        <StatusBar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,0,5,5">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*" MaxWidth="300"/>
                            <ColumnDefinition Width="4*"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <StatusBarItem Grid.Column="0" HorizontalAlignment="Right" Margin="0,-2,0,-2">
                <Grid HorizontalAlignment="Left">
                    <ProgressBar x:Name="progBar" Value="{Binding BackgroundWorker.ProgressPercentage}" 
                                 Width="100" Height="20" Minimum="0" Maximum="100"
                                 IsIndeterminate="{Binding BackgroundWorker.ProgressIndeterminated}"/>

                    <TextBlock Text="{Binding BackgroundWorker.ProgressPercentage, StringFormat=\{0:D\} \%}"
                               HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding BackgroundWorker.IsBusy}" Value="False">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding BackgroundWorker.ProgressIndeterminated}" Value="True">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </StatusBarItem>
            
            <StatusBarItem Grid.Column="1" HorizontalAlignment="Left" Margin="0,-2,-2,-2">
                <TextBlock x:Name="textBlockStatus" Text="{Binding BackgroundWorker.TaskName}"
                           Visibility="{Binding BackgroundWorker.IsBusy, Converter={cvt:BoolToVisibility}}"/>
            </StatusBarItem>

            <StatusBarItem Grid.Column="1" HorizontalAlignment="Right" Height="24">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/KAILOSMapTools;component/Resources/globe.png" 
                           Height="24" Margin="0,-4,0,-4"/>
                    <ComboBox Height="24" Margin="5,-4,10,-4" VerticalContentAlignment="Center"
                              DataContext="{x:Static Application.Current}"
                              d:DataContext="{d:DesignInstance Type=imt:App}"
                              ItemsSource="{Binding AvailableCultures}"
                              SelectedItem="{Binding Culture}"
                              DisplayMemberPath="NativeName"/>
                    <TextBlock Text="ver " VerticalAlignment="Center"/>
                    <TextBlock Text="{StaticResource AppVersion}" VerticalAlignment="Center"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>

        <Border Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2"
                Margin="0,0,0,2" Background="White" Opacity="0.5" Cursor="Wait"
                IsHitTestVisible="{Binding BackgroundWorker.IsBusy}" 
                d:Visibility="Hidden" Visibility="{Binding BackgroundWorker.IsBusy, 
                    Converter={cvt:BoolToVisibility}}"/>
    </Grid>
</Window>
